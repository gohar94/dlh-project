    _                _                      
   / \   ___ ___ ___| | ___ _ __ __ _ _   _ 
  / _ \ / __/ __/ _ \ |/ _ \ '__/ _` | | | |
 / ___ \ (_| (_|  __/ |  __/ | | (_| | |_| |
/_/   \_\___\___\___|_|\___|_|  \__, |\__, |
                                |___/ |___/ 

Info: generating outputs according to the following specified output flags... 
 Please use the -f flag to update the preference (default to all output files) 
{'ERT': 1, 'ERT_summary': 1, 'ART': 1, 'ART_summary': 1, 'energy_estimation': 1, 'flattened_arch': 1}
Info: config file located: /home/workspace/.config/accelergy/accelergy_config.yaml 
config file content: 
 {'compound_components': [], 'estimator_plug_ins': ['/usr/local/share/accelergy/estimation_plug_ins'], 'primitive_components': ['/usr/local/share/accelergy/primitive_component_libs'], 'table_plug_ins': {'roots': ['/usr/local/share/accelergy/estimation_plug_ins/accelergy-table-based-plug-ins/set_of_table_templates', '/home/workspace/final-project/example_designs/simple_pim/PIM_estimation_tables']}, 'version': 0.3}
Warn: Cannot recognize the top key "mapping" in file tmp.yaml 
Warn: Cannot recognize the top key "problem" in file tmp.yaml 
Info: Parsing file tmp.yaml for architecture info 
Info: Found non-numeric expression 1ns. Available bindings: {'latency': '1ns', 'technology': '32nm'} 
WARN: Failed to evaluate "1ns". Setting system_arch.latency="1ns". Available bindings: {'latency': '1ns', 'technology': '32nm'}
Info: Found non-numeric expression 32nm. Available bindings: {'latency': '1ns', 'technology': '32nm'} 
WARN: Failed to evaluate "32nm". Setting system_arch.technology="32nm". Available bindings: {'latency': '1ns', 'technology': '32nm'}
Info: Found non-numeric expression D2A_NoC. Available bindings: {'block-size': 4, 'memory_depth': 16384, 'memory_width': 64, 'n_banks': 32, 'n_rdwr_ports': 2, 'network_read': 'D2A_NoC', 'network_update': 'A2D_NoC', 'read_bandwidth': 16, 'word-bits': 16, 'write_bandwidth': 16, 'latency': '1ns', 'technology': '32nm'} 
WARN: Failed to evaluate "D2A_NoC". Setting variables.network_read="D2A_NoC". Available bindings: {'attributes': {'block-size': 4, 'memory_depth': 16384, 'memory_width': 64, 'n_banks': 32, 'n_rdwr_ports': 2, 'network_read': 'D2A_NoC', 'network_update': 'A2D_NoC', 'read_bandwidth': 16, 'word-bits': 16, 'write_bandwidth': 16, 'latency': '1ns', 'technology': '32nm'}, 'class': 'smartbuffer_SRAM', 'name': 'shared_glb'}
Info: Found non-numeric expression A2D_NoC. Available bindings: {'block-size': 4, 'memory_depth': 16384, 'memory_width': 64, 'n_banks': 32, 'n_rdwr_ports': 2, 'network_read': 'D2A_NoC', 'network_update': 'A2D_NoC', 'read_bandwidth': 16, 'word-bits': 16, 'write_bandwidth': 16, 'latency': '1ns', 'technology': '32nm'} 
WARN: Failed to evaluate "A2D_NoC". Setting variables.network_update="A2D_NoC". Available bindings: {'attributes': {'block-size': 4, 'memory_depth': 16384, 'memory_width': 64, 'n_banks': 32, 'n_rdwr_ports': 2, 'network_read': 'D2A_NoC', 'network_update': 'A2D_NoC', 'read_bandwidth': 16, 'word-bits': 16, 'write_bandwidth': 16, 'latency': '1ns', 'technology': '32nm'}, 'class': 'smartbuffer_SRAM', 'name': 'shared_glb'}
WARN: Failed to evaluate "A2D_NoC". Setting variables.network_drain="A2D_NoC". Available bindings: {'attributes': {'depth': 0, 'network_drain': 'A2D_NoC', 'network_fill': 'D2A_NoC', 'width': 16, 'latency': '1ns', 'technology': '32nm'}, 'class': 'dummy_storage', 'name': 'dummy_buffer'}
WARN: Failed to evaluate "D2A_NoC". Setting variables.network_fill="D2A_NoC". Available bindings: {'attributes': {'depth': 0, 'network_drain': 'A2D_NoC', 'network_fill': 'D2A_NoC', 'width': 16, 'latency': '1ns', 'technology': '32nm'}, 'class': 'dummy_storage', 'name': 'dummy_buffer'}
Info: Found non-numeric expression transfer. Available bindings: {'DAC_datawidth': 1, 'action_name': 'transfer', 'datawidth': 16, 'multicast_factor_argument': 'num_destinations', 'n_DAC_cycles': 16, 'n_PE_cols': 363, 'n_PE_rows': 96, 'per_datatype_ERT': True, 'latency': '1ns', 'technology': '32nm'} 
WARN: Failed to evaluate "transfer". Setting variables.action_name="transfer". Available bindings: {'attributes': {'DAC_datawidth': 1, 'action_name': 'transfer', 'datawidth': 16, 'multicast_factor_argument': 'num_destinations', 'n_DAC_cycles': 16, 'n_PE_cols': 363, 'n_PE_rows': 96, 'per_datatype_ERT': True, 'latency': '1ns', 'technology': '32nm'}, 'class': 'SimpleMulticast', 'name': 'D2A_NoC', 'subclass': 'DAC_SimpleMulticast'}
Info: Found non-numeric expression num_destinations. Available bindings: {'DAC_datawidth': 1, 'action_name': 'transfer', 'datawidth': 16, 'multicast_factor_argument': 'num_destinations', 'n_DAC_cycles': 16, 'n_PE_cols': 363, 'n_PE_rows': 96, 'per_datatype_ERT': True, 'latency': '1ns', 'technology': '32nm'} 
WARN: Failed to evaluate "num_destinations". Setting variables.multicast_factor_argument="num_destinations". Available bindings: {'attributes': {'DAC_datawidth': 1, 'action_name': 'transfer', 'datawidth': 16, 'multicast_factor_argument': 'num_destinations', 'n_DAC_cycles': 16, 'n_PE_cols': 363, 'n_PE_rows': 96, 'per_datatype_ERT': True, 'latency': '1ns', 'technology': '32nm'}, 'class': 'SimpleMulticast', 'name': 'D2A_NoC', 'subclass': 'DAC_SimpleMulticast'}
Info: Parsing file tmp.yaml for compound_components info 
Info: primitive component file parsed:  /usr/local/share/accelergy/primitive_component_libs/primitive_component.lib.yaml 
Info: primitive component file parsed:  /usr/local/share/accelergy/primitive_component_libs/soc_primitives.lib.yaml 
Info: primitive component file parsed:  /usr/local/share/accelergy/primitive_component_libs/pim_primitive_component.lib.yaml 
Info: Found non-numeric expression memristor. Available bindings: {'depth': 1, 'meshX': 363, 'meshY': 96, 'width': 16, 'latency': '1ns', 'technology': '32nm', 'cell_datawidth': 2, 'cell_technology': 'memristor', 'cmos_technology': '32nm'} 
WARN: Failed to evaluate "memristor". Setting system_arch.chip.PE[0..34847].scratchpad.cell_technology="memristor". Available bindings: {'depth': 1, 'meshX': 363, 'meshY': 96, 'width': 16, 'latency': '1ns', 'technology': '32nm', 'cell_datawidth': 2, 'cell_technology': 'memristor', 'cmos_technology': '32nm'}
WARN: Failed to evaluate "32nm". Setting system_arch.chip.PE[0..34847].scratchpad.cmos_technology="32nm". Available bindings: {'depth': 1, 'meshX': 363, 'meshY': 96, 'width': 16, 'latency': '1ns', 'technology': '32nm', 'cell_datawidth': 2, 'cell_technology': 'memristor', 'cmos_technology': '32nm'}
Info: Found non-numeric expression 100ns. Available bindings: {'datawidth': 16, 'meshX': 363, 'meshY': 96, 'latency': '1ns', 'technology': '32nm', 'DAC_datawidth': 1, 'cell_datawidth': 2, 'cell_technology': 'memristor', 'cmos_technology': '32nm', 'compute_latency': '100ns', 'nCells': 'datawidth/cell_datawidth', 'nCycles': 'datawidth/DAC_datawidth'} 
WARN: Failed to evaluate "100ns". Setting system_arch.chip.PE[0..34847].mac.compute_latency="100ns". Available bindings: {'datawidth': 16, 'meshX': 363, 'meshY': 96, 'latency': '1ns', 'technology': '32nm', 'DAC_datawidth': 1, 'cell_datawidth': 2, 'cell_technology': 'memristor', 'cmos_technology': '32nm', 'compute_latency': '100ns', 'nCells': 'datawidth/cell_datawidth', 'nCycles': 'datawidth/DAC_datawidth'}
Info: Calculated "datawidth/cell_datawidth" = 8 
Info: Calculated "datawidth/DAC_datawidth" = 16 
Info: Found non-numeric expression LPDDR4. Available bindings: {'block-size': 4, 'datawidth': 16, 'width': 64, 'latency': '1ns', 'technology': '32nm', 'type': 'LPDDR4'} 
WARN: Failed to evaluate "LPDDR4". Setting system_arch.DRAM.type="LPDDR4". Available bindings: {'block-size': 4, 'datawidth': 16, 'width': 64, 'latency': '1ns', 'technology': '32nm', 'type': 'LPDDR4'}
WARN: Failed to evaluate "memristor". Setting storage.technology="memristor". Available bindings: OrderedDict([('cellwidth', 2), ('latency', '1ns'), ('technology', 'memristor')])
Info: Calculated "nCells-1" = 7 
WARN: Failed to evaluate "100ns". Setting cell[0..7].latency="100ns". Available bindings: {'datawidth': 16, 'meshX': 363, 'meshY': 96, 'latency': '1ns', 'technology': '32nm', 'DAC_datawidth': 1, 'cell_datawidth': 2, 'cell_technology': 'memristor', 'cmos_technology': '32nm', 'compute_latency': '100ns', 'nCells': 8, 'nCycles': 16}
Info: Calculated "nCycles" = 16 
Info: Found non-numeric expression 5ns. Available bindings: OrderedDict([('depth', 16384), ('n_banks', 32), ('n_rdwr_ports', 2), ('technology', '32nm'), ('width', 64), ('n_rd_ports', 0), ('n_wr_ports', 0), ('latency', '5ns')]) 
WARN: Failed to evaluate "5ns". Setting storage.latency="5ns". Available bindings: OrderedDict([('depth', 16384), ('n_banks', 32), ('n_rdwr_ports', 2), ('technology', '32nm'), ('width', 64), ('n_rd_ports', 0), ('n_wr_ports', 0), ('latency', '5ns')])
Info: Calculated "log(memory_depth)" = 9.704060527839234 
Info: Calculated "n_banks" = 32 
Info: Found non-numeric expression 65nm. Available bindings: OrderedDict([('datawidth', 0), ('depth', 0), ('n_rdwr_ports', 0), ('width', 0), ('technology', '65nm'), ('n_rd_ports', 0), ('n_wr_ports', 0), ('n_banks', 1), ('latency', '5ns')]) 
WARN: Failed to evaluate "65nm". Setting storage.technology="65nm". Available bindings: OrderedDict([('datawidth', 0), ('depth', 0), ('n_rdwr_ports', 0), ('width', 0), ('technology', '65nm'), ('n_rd_ports', 0), ('n_wr_ports', 0), ('n_banks', 1), ('latency', '5ns')])
Info: Found non-numeric expression nArrays * meshY. Available bindings: OrderedDict([('DAC_datawidth', 1), ('cell_datawidth', 2), ('datawidth', 16), ('latency', '1ns'), ('technology', '32nm'), ('DAC_converts_per_psum', 'datawidth/DAC_datawidth'), ('meshX', 128), ('meshY', 128), ('nArrays', 'datawidth/cell_datawidth'), ('nCells', 8), ('nCycles', 16), ('total_DACs', 'nArrays * meshY')]) 
WARN: Failed to evaluate "nArrays * meshY". Setting D2A_converter.total_DACs="nArrays * meshY". Available bindings: OrderedDict([('DAC_datawidth', 1), ('cell_datawidth', 2), ('datawidth', 16), ('latency', '1ns'), ('technology', '32nm'), ('DAC_converts_per_psum', 'datawidth/DAC_datawidth'), ('meshX', 128), ('meshY', 128), ('nArrays', 'datawidth/cell_datawidth'), ('nCells', 8), ('nCycles', 16), ('total_DACs', 'nArrays * meshY')])
Info: Found non-numeric expression total_DACs-1. Available bindings: OrderedDict([('DAC_datawidth', 1), ('cell_datawidth', 2), ('datawidth', 16), ('latency', '1ns'), ('technology', '32nm'), ('DAC_converts_per_psum', 'datawidth/DAC_datawidth'), ('meshX', 128), ('meshY', 128), ('nArrays', 'datawidth/cell_datawidth'), ('nCells', 8), ('nCycles', 16), ('total_DACs', 'nArrays * meshY')]) 





============================================================
Accelergy has encountered an error and crashed. Error below: 
============================================================
|| Traceback (most recent call last):
||   File "/usr/local/lib/python3.8/dist-packages/accelergy/accelergy_console.py", line 164, in main
||     run()
||   File "/usr/local/lib/python3.8/dist-packages/accelergy/accelergy_console.py", line 114, in run
||     cc = CompoundComponent({'component': arch_component, 'pc_classes':system_state.pc_classes, 'cc_classes':system_state.cc_classes})
||   File "/usr/local/lib/python3.8/dist-packages/accelergy/compound_component.py", line 37, in __init__
||     self.set_subcomponents(cc_classes, pc_classes)
||   File "/usr/local/lib/python3.8/dist-packages/accelergy/compound_component.py", line 60, in set_subcomponents
||     list_of_defined_primitive_components = self.process_subcomponents(self, cc_classes, pc_classes)
||   File "/usr/local/lib/python3.8/dist-packages/accelergy/compound_component.py", line 91, in process_subcomponents
||     list_of_new_defined_primitive_components = self.process_subcomponents(defined_subcomponent, cc_classes, pc_classes)
||   File "/usr/local/lib/python3.8/dist-packages/accelergy/compound_component.py", line 73, in process_subcomponents
||     defined_sub_name = CompoundComponent.define_subcomponent_name(default_sub_name, compound_attributes)
||   File "/usr/local/lib/python3.8/dist-packages/accelergy/compound_component.py", line 217, in define_subcomponent_name
||     name_base, list_suffix, list_length = interpret_component_list(subcomponent_name, mapping_dictionary)
||   File "/usr/local/lib/python3.8/dist-packages/accelergy/parsing_utils.py", line 65, in interpret_component_list
||     list_end_idx = str_to_int(name[range_flag+2:right_bracket_idx], binding_dictionary)
||   File "/usr/local/lib/python3.8/dist-packages/accelergy/parsing_utils.py", line 82, in str_to_int
||     else int(str_to_be_parsed)
|| ValueError: invalid literal for int() with base 10: 'total_DACs-1'
============================================================
Stack with local variables (most recent call last):
============================================================
Frame 2
============================================================
| /usr/local/lib/python3.8/dist-packages/accelergy/compound_component.py:217
| ValueError: invalid literal for int() with base 10: 'total_DACs-1'
| Local var subcomponent_name =            DAC[0..total_DACs-1]
| Local var mapping_dictionary =           OrderedDict([('DAC_datawidth', 1), ('cell_datawidth', 2), ('datawidth', 16), ('latency', '1ns'), ('technology', '32nm'), ('DAC_converts_per_psum', 'datawidth/DAC_datawidth'), ('meshX', 128), ('meshY', 128), ('nArrays', 'datawidth/cell_datawidth'), ('nCells', 8), ('nCycles', 16), ('total_DACs', 'nArrays * meshY')])
|          214:        # define the list index specified in the subcomponents (if any)
|          215:        # mapping dictionary contains key-value paris where the keys can be used as reference in the list definition
|          216: | ERROR >> 217:        name_base, list_suffix, list_length = interpret_component_list(subcomponent_name, mapping_dictionary)
|          218:        if list_suffix is not None: subcomponent_name = name_base + list_suffix
|          219:        return subcomponent_name
|          220: ============================================================
Frame 1
============================================================
| /usr/local/lib/python3.8/dist-packages/accelergy/parsing_utils.py:65
| ValueError: invalid literal for int() with base 10: 'total_DACs-1'
| Local var name =                         DAC[0..total_DACs-1]
| Local var binding_dictionary =           OrderedDict([('DAC_datawidth', 1), ('cell_datawidth', 2), ('datawidth', 16), ('latency', '1ns'), ('technology', '32nm'), ('DAC_converts_per_psum', 'datawidth/DAC_datawidth'), ('meshX', 128), ('meshY', 128), ('nArrays', 'datawidth/cell_datawidth'), ('nCells', 8), ('nCycles', 16), ('total_DACs', 'nArrays * meshY')])
| Local var left_bracket_idx =             3
| Local var range_flag =                   5
| Local var name_base =                    DAC
| Local var right_bracket_idx =            19
| Local var list_start_idx =               0
|          62: name_base = name[:left_bracket_idx]
|          63: right_bracket_idx = name.find(']')
|          64: list_start_idx = str_to_int(name[left_bracket_idx+1:range_flag], binding_dictionary)
| ERROR >> 65: list_end_idx = str_to_int(name[range_flag+2:right_bracket_idx], binding_dictionary)
|          66: list_suffix = '[' + str(list_start_idx) + '..' + str(list_end_idx) + ']'
|          67: ASSERT_MSG(list_end_idx >= list_start_idx,
|          68:            'end index < start index %s (interpreted as %s)' % (name, name_base + list_suffix))
============================================================
Frame 0
============================================================
| /usr/local/lib/python3.8/dist-packages/accelergy/parsing_utils.py:82
| ValueError: invalid literal for int() with base 10: 'total_DACs-1'
| Local var str_to_be_parsed =             total_DACs-1
| Local var binding_dictionary =           OrderedDict([('DAC_datawidth', 1), ('cell_datawidth', 2), ('datawidth', 16), ('latency', '1ns'), ('technology', '32nm'), ('DAC_converts_per_psum', 'datawidth/DAC_datawidth'), ('meshX', 128), ('meshY', 128), ('nArrays', 'datawidth/cell_datawidth'), ('nCells', 8), ('nCycles', 16), ('total_DACs', 'nArrays * meshY')])
|          79:             parsed_int = int(str_to_be_parsed)
|          80:         else:
|          81:             parsed_int = binding_dictionary[str_to_be_parsed] if str_to_be_parsed in binding_dictionary \
| ERROR >> 82:                                                           else int(str_to_be_parsed)
|          83:     return parsed_int
|          84: 
|          85: def arithmetic_failed_evaluate_warn(expr, setting, name, binding_dictionary, error=False):
============================================================
