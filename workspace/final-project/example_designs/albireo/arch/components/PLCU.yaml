compound_components:
  version: 0.3
  classes:
    - name: PLCU
      attributes:
        technology: 7nm
        datawidth: 8 # The MRR can do k^2 = 0.03 with 7 bit, we are simplifying to keep nice round numbers :)
        PLCU_datawidth: 8 # for simplification, assume architecture is not bit serial. main reason is there is no one-to-one correlation between wavelengths and bits. if the architecture processes 10 wavelengths at once (for example), it is unclear how many bits are processed at once. assume a constant PLCU_datawidth of 8.
        latency: 1ns # keep the default as in PIM. 
        Nm: 9
        Nd: 5
        nMRRs: 2 * Nm * Nd
        nMZMs: Nm
        nCycles: datawidth/PLCU_datawidth
      subcomponents:
        - name: mrrs[0..nMRRs-1]
          class: MRR
          attributes:
            technology: technology
            mrrwidth: PLCU_datawidth
            latency: latency
        - name: mzms[0..nMZMs-1]
          class: MZM
          attributes:
            technology: technology
            mzmwidth: PLCU_datawidth
            latency: latency
      actions:
        - name: compute
          subcomponents:
            - name: mrrs[0..nMRRs-1]
              actions:
                - name: compute
                  action_share: nCycles
            - name: mzms[0..nMZMs-1]
              actions:
                - name: compute
                  action_share: nCycles
